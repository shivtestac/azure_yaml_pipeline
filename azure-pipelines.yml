
trigger:
- main
- dev

pool:
  vmImage: ubuntu-latest


stages:
  - stage: Buiild
    displayName: Build Stage
    variables:
    - group: build
    jobs:
      - job: pubartifacet
        steps:
          - checkout: none
          - script: |
              echo "Checking out the correct branch"
              if [ "$(Build.SourceBranchName)" == "main" ]; then
                git checkout main
              elif [ "$(Build.SourceBranchName)" == "dev" ]; then
                git checkout dev
              elif [ "$(Build.SourceBranchName)" == "test" ]; then
                git checkout test
              fi
            displayName: Checkout Correct Branch
          
          
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'  # Root source directory
              Contents: '**/*.php'  # Match all PHP files
              TargetFolder: '$(Build.ArtifactStagingDirectory)/build'  # Target staging directory

          - script: |
              cd $(Build.ArtifactStagingDirectory)
              zip -r build.zip build/* -j
              echo "ZIP file created: php-files.zip"
            displayName: Create ZIP File
          


          # Publish the PHP files as build artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/build.zip'  # Publish from the staging directory
              ArtifactName: 'drop'
              publishLocation: 'Container'
          - script: |
              echo "build var is $(build)"
              echo "deploy var is $(deploy)"
    
      
  
  - stage: DeployProd 
    displayName: Deploying Prod server
    variables:
    - group: deploy
    jobs:
      - job: Deploy
        condition:  and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: "$(System.ArtifactsDirectory)/drop"
          
          - script: |
              echo "build var is $(build)"
              echo "deploy var is $(deploy)"
              pwd
              ls -ll $(System.ArtifactsDirectory)

          
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: 'ssh dev server'
              sourceFolder: "$(System.ArtifactsDirectory)/drop"
              contents: '**'
              targetFolder: '/root/azure/'
              readyTimeout: '20000'
        
          - task: SSH@0
            inputs:
              sshEndpoint: 'ssh dev server'
              runOptions: 'commands'
              commands: ls -ll
              #commands: 'mkdir /root/azure/ggggggggggggggggggggggggg'
              readyTimeout: '20000'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Pay-As-You-Go(e0b04bb4-2704-41a6-894f-a1032232638a)'
              appType: 'webAppLinux'
              appName: 'fdfvdsffsdfsdfdsfdsfsdfdsfdsfdsfdsfsd'
              package: '$(System.ArtifactsDirectory)/**/*.zip'



  - stage: DeployDev 
    displayName: Deploying Dev server
    variables:
    - group: deploy
    jobs:
      - job: Deploy
        condition:  and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: "$(System.ArtifactsDirectory)/drop"
          
          - script: |
              echo "build var is $(build)"
              echo "deploy var is $(deploy)"
              pwd
              ls -ll $(System.ArtifactsDirectory)

          
          - task: CopyFilesOverSSH@0
            inputs:
              sshEndpoint: 'ssh dev server'
              sourceFolder: "$(System.ArtifactsDirectory)/drop"
              contents: '**'
              targetFolder: '/root/azure/'
              readyTimeout: '20000'
        
          - task: SSH@0
            inputs:
              sshEndpoint: 'ssh dev server'
              runOptions: 'commands'
              commands: ls -ll
              #commands: 'mkdir /root/azure/ggggggggggggggggggggggggg'
              readyTimeout: '20000'

          

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Pay-As-You-Go(e0b04bb4-2704-41a6-894f-a1032232638a)'
              appType: 'webAppLinux'
              appName: 'fdfvdsffsdfsdfdsfdsfsdfdsfdsfdsfdsfsd'
              deployToSlotOrASE: true
              resourceGroupName: 'buepapmpi'
              slotName: 'dev'
              package: '$(System.ArtifactsDirectory)/**/*.zip'
          

          